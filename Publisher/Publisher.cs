using System.Diagnostics;
using System.Xml;

namespace Publisher
{
    class Publisher
    {
        static string projectName = "RunApp";
        static string assemblyName = "PentestGUI";
        static string outputDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

        public static void Main(string[] args)
        {
            string? projectDirectory = GetProjectDirectory(projectName);
            if (Directory.Exists(projectDirectory))
            {
                string contentDirectory = Path.Combine(projectDirectory, "Resources");
                Console.WriteLine(contentDirectory);
                PublishProject(projectDirectory, contentDirectory, assemblyName);
            }
        }

        private static void PublishProject(string projectDirectory, string contentDirectory, string assemblyName)
        {            
            string? projectFile = Directory.GetFiles(projectDirectory, "*.csproj").FirstOrDefault();
            if (projectFile != null)
            {
                AddContent(projectFile, contentDirectory);
                AddPublishSettings(projectFile, assemblyName);
                string result = CreateExecutable(projectDirectory, outputDirectory);
                Console.WriteLine(result);
            }
        }

        private static void AddPublishSettings(string projectFile, string assemblyName)
        {
            XmlDocument document = new XmlDocument();
            document.Load(projectFile);

            XmlNode? propertyGroupNode = document.SelectSingleNode("Project/PropertyGroup");
            if (propertyGroupNode != null)
            {
                AddNode(propertyGroupNode, "AssemblyName", assemblyName);
                AddNode(propertyGroupNode, "PublishSingleFile", "true");
                AddNode(propertyGroupNode, "SelfContained", "true");
                AddNode(propertyGroupNode, "IncludeAllContentForSelfExtract", "true");
                AddNode(propertyGroupNode, "IncludeNativeLibrariesForSelfExtract", "true");
            }

            document.Save(projectFile);
        }

        private static void AddContent(string projectFile, string contentDirectory)
        {
            XmlDocument document = new XmlDocument();
            document.Load(projectFile);

            XmlNode? projectNode = document.SelectSingleNode("Project");
            if (projectNode == null)
            {
                Console.WriteLine("Project node does not exist");
                return;
            }

            XmlNode? itemGroupNode = AddNode(projectNode, "ItemGroup");
            if (itemGroupNode != null)
            {
                // Removing old content (in reverse order to avoid modifying list while iterating over it)
                for (int i = itemGroupNode.ChildNodes.Count - 1; i >= 0; i--)
                {
                    XmlNode? node = itemGroupNode.ChildNodes[i];
                    if (node != null && node.Name == "Content")
                    {
                        itemGroupNode.RemoveChild(node);
                    }
                }

                string[] content = Directory.GetFiles(contentDirectory, "*", SearchOption.AllDirectories);
                if (content.Length > 0)
                {
                    Console.WriteLine("Content files: ");
                    foreach (string sourcePath in content)
                    {
                        Console.WriteLine(sourcePath);

                        XmlElement contentElement = document.CreateElement("Content");
                        contentElement.SetAttribute("Include", sourcePath);
                        itemGroupNode.AppendChild(contentElement);

                        AddNode(contentElement, "CopyToOutputDirectory", "Always");

                        // Destination in build directory
                        string relativePath = Path.GetRelativePath(contentDirectory, sourcePath);
                        AddNode(contentElement, "Link", $"Content\\{relativePath}");
                    }
                }
                else
                {
                    Console.WriteLine("Content files not found.");
                }
            }
            document.Save(projectFile);
        }

        private static XmlNode? AddNode(XmlNode parentNode, string name, string? value = null)
        {
            XmlDocument? document = parentNode.OwnerDocument;
            if (document != null)
            {
                XmlNode? node = parentNode.SelectSingleNode(name);
                if (node == null)
                {
                    node = document.CreateElement(name);
                    parentNode.AppendChild(node);
                }
                if (value != null)
                {
                    node.InnerText = value;
                }
                return node;
            }
            return null;
        }

        private static string CreateExecutable(string projectDirectory, string outputDirectory)
        {
            string command = $"dotnet publish -r win-x64 --output {outputDirectory}";

            Process process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    WorkingDirectory = projectDirectory,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    Arguments = $"-NoProfile -ExecutionPolicy Bypass -Command \"{command}\""
                }
            };

            Console.WriteLine("Creating executable...");
            process.Start();

            string output = process.StandardOutput.ReadToEnd();
            string error = process.StandardError.ReadToEnd();

            process.WaitForExit();

            return output + "\n" + error;
        }

        // Finds project directory (by project name) in current solution
        private static string? GetProjectDirectory(string projectName)
        {
            string? solutionDirectory = GetSolutionDirectory();
            if (solutionDirectory != null)
            {
                string[] children = Directory.GetDirectories(solutionDirectory);

                foreach (string directory in children)
                {
                    string? projectFile = Directory.GetFiles(directory, $"{projectName}.csproj").FirstOrDefault();

                    if (projectFile != null)
                    {
                        return directory;
                    }
                }
                Console.WriteLine("Project directory not found.");
            }
            return null;
        }

        private static string? GetSolutionDirectory()
        {
            string currentDir = AppDomain.CurrentDomain.BaseDirectory;
            DirectoryInfo? dirInfo = new DirectoryInfo(currentDir);

            while (dirInfo != null)
            {
                string? solutionFile = Directory.GetFiles(dirInfo.FullName, "*.sln").FirstOrDefault();
                if (solutionFile != null)
                {
                    return dirInfo.FullName;
                }
                else
                {
                    dirInfo = dirInfo.Parent;
                }
            }
            Console.WriteLine("Solution directory not found.");
            return null;
        }
    }
}