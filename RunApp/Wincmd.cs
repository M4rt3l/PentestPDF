using PdfSharp.Drawing;
using System.Text.RegularExpressions;

namespace RunApp
{
    class Wincmd
    {
        public static void AddReport(string path)
        {
            if (path != null)
            {
                PDF.champterName = "Windows Commands";
                PDF.champterColor = XBrushes.DodgerBlue;
                PDF.NewPage(true);

                WriteRecordsFromTxt(path);
            }
        }

        public static void WriteRecordsFromTxt(string path) 
        {
            string[] lines = File.ReadAllLines(path);
            string command = "";
            string arguments = "";
            int counter = 0;

            foreach (string line in lines)
            {
                Match match_command = Regex.Match(line, @"^\# Command:\s(\w+)(?:\s(.*))?");
                if (match_command.Success)
                {
                    command = match_command.Groups[1].Value;
                    arguments = match_command.Groups[2].Value;
                    PDF.NewLine(5);
                    PDF.WriteLine($"Command: ", false, PDF.boldFont);
                    PDF.Write($"{command} ", false, PDF.normalFont, XBrushes.DodgerBlue);
                    PDF.Write(arguments);
                }
                else
                {
                    if (command == "whoami")
                    {
                        Match match = Regex.Match(line, @"^([^\s]+)");
                        if (match.Success)
                        {
                            PDF.WriteLine(match.Groups[1].Value, false, PDF.normalFont, XBrushes.Black, 15);
                        }
                    }
                    else if (command == "systeminfo")
                    {
                        Match match = Regex.Match(line, @"^((?:\w+\s)+\w+)\:\s+(.*)");
                        if (match.Success)
                        {
                            PDF.WriteLine($"{match.Groups[1].Value}: ", true, PDF.boldFont, XBrushes.Navy);
                            PDF.Write(match.Groups[2].Value);
                        }
                    }
                    else if (command == "ipconfig")
                    {
                        Match match_name = Regex.Match(line, @"^(.*)\:$");
                        Match match = Regex.Match(line, @"((?:\w+\s)+\w+)(?:\s+)?(?:\.\s)+\:\s+(.*)");

                        if (match_name.Success)
                        {
                            PDF.WriteLine(match_name.Groups[1].Value, true, PDF.boldFont);
                        }
                        else if (match.Success)
                        {
                            string value = match.Groups[2].Value;
                            if (value != "")
                            {
                                string parameter = match.Groups[1].Value;
                                PDF.WriteLine($"{parameter}: ", true, PDF.boldFont, XBrushes.Navy, 15);
                                PDF.Write(value);
                            }
                        }
                    }
                    else if (command == "tracert")
                    {
                        Match match = Regex.Match(line, @"(\d)\s+(\<?\d+\ ms)\s+(\<?\d+\ ms)\s+(\<?\d+\ ms)\s+(.*)");
                        if (match.Success)
                        {
                            PDF.WriteLine($"hop {match.Groups[1].Value}: ", true, PDF.normalFont, XBrushes.Black);
                            PDF.Write($"{match.Groups[2].Value} {match.Groups[3].Value} {match.Groups[4].Value} ");
                            PDF.Write(match.Groups[5].Value);
                        }
                    }
                    else if (command == "nslookup")
                    {
                        Match match = Regex.Match(line, @"^(\w+)\:\s+(.*)");
                        if (match.Success)
                        {
                            PDF.WriteLine($"{match.Groups[1].Value}: ", true, PDF.boldFont);
                            PDF.Write(match.Groups[2].Value);
                        }
                    }
                    else if (command == "netstat")
                    {
                        Match match = Regex.Match(line, @"^\s+(\w{3})\s+([^\s]+)\s+([^\s]+)(?:\s+([^\s]+))?");
                        XBrush stateColor;

                        if (match.Success)
                        {
                            counter++;
                            PDF.WriteLine($"Connection {counter}: ", true, PDF.boldFont);

                            PDF.WriteLine("Protocol: ", true, PDF.boldFont, XBrushes.Navy, 15);
                            PDF.Write(match.Groups[1].Value);
                            PDF.WriteLine("Local address: ", true, PDF.boldFont, XBrushes.Navy, 15);
                            PDF.Write(match.Groups[2].Value);
                            PDF.WriteLine("Foreign address: ", true, PDF.boldFont, XBrushes.Navy, 15);
                            PDF.Write(match.Groups[3].Value);

                            string state = match.Groups[4].Value;
                            if (state != "")
                            {
                                if (state == "ESTABLISHED") { stateColor = XBrushes.Green; }
                                else if (state == "TIME_WAIT") { stateColor = XBrushes.Orange; }
                                else if (state == "LISTENING") { stateColor = XBrushes.Red; }
                                else if (state == "CLOSE_WAIT") { stateColor = XBrushes.Orange; }
                                else { stateColor = XBrushes.Black; }

                                PDF.WriteLine("State: ", true, PDF.boldFont, XBrushes.Navy, 15);
                                PDF.Write($"{state}", false, PDF.normalFont, stateColor);
                            }
                        }
                    }
                }
            }
        }
    }
}
