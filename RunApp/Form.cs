using System;
using System.Diagnostics;
using System.Text.RegularExpressions;

namespace RunApp
{
    public partial class Form : System.Windows.Forms.Form
    {
        private static string workDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        private static string target = "127.0.0.1";
        private static bool runSuccess;

        public Form()
        {
            InitializeComponent();
        }

        private void target_TextChanged(object sender, EventArgs e)
        {
            string text = textBox_target.Text.Trim();

            string pattern = @"^(?:\d{1,3}\.){3}\d{1,3}$";
            Regex regex = new Regex(pattern);

            if (regex.IsMatch(text))
            {
                textBox_target.ForeColor = Color.Green;
                target = textBox_target.Text;
            }
            else
            {
                textBox_target.ForeColor = Color.Red;
                target = "127.0.0.1";
            }
        }

        private void thread_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox_nikto.Checked || checkBox_mimikatz.Checked)
            {
                label_warning.Text = "WARNING: Some of tools you have selected might be evaluated as a potential threat by antivirus. " +
                    "Turn off your antivirus before RUN for proper function of the tool.";
            }
            else
            {
                label_warning.Text = "";
            }

        }

        private void changeWorkDirectory_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = workDirectory;

                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    workDirectory = dialog.SelectedPath;
                }
            }
        }

        private async void run_Click(object sender, EventArgs e)
        {
            buttonRun.Enabled = false;
            ResetLabels();

            bool anyChecked = IsAnythingChecked(tableLayout);
            if (anyChecked)
            {
                CleanupOutputDirectory();

                await HandleRun("nmap", checkBox_nmap, label_nmap, consoleBox);
                await HandleRun("sqlmap", checkBox_sqlmap, label_sqlmap, consoleBox);
                await HandleRun("mimikatz", checkBox_mimikatz, label_mimikatz, consoleBox);
                await HandleRun("nikto", checkBox_nikto, label_nikto, consoleBox);
                await HandleRun("wincmd", checkBox_wincmd, label_wincmd, consoleBox);

                PDFCreator.Create(workDirectory, postOpen.Checked);
            }
            else
            {
                consoleBox.Text += "Nothing is checked. Please select some tool." + Environment.NewLine;
            }

            buttonRun.Enabled = true;
        }

        private async Task HandleRun(string scriptName, CheckBox checkBox, Label label, TextBox consoleBox)
        {
            runSuccess = false;

            if (checkBox.Checked)
            {
                string scriptPath = Path.Combine(Program.baseDirectory, "Content", "Scripts", $"{scriptName}.ps1");

                if (File.Exists(scriptPath))
                {
                    label.Text = "Running";
                    label.ForeColor = Color.Black;
                    consoleBox.Text += GetSeparator(scriptName) + Environment.NewLine;
                    consoleBox.Text += $"{scriptName}.ps1 is Running..." + Environment.NewLine;

                    string result = await Task.Run(() => RunScript(scriptPath));
                    consoleBox.Text += result;
                }
                else
                {
                    consoleBox.Text += $"Script {scriptName} was not found.";
                }

                label.Text = runSuccess ? "Success" : "Failed";
                label.ForeColor = runSuccess ? Color.Green : Color.Red;
            }
        }

        private string RunScript(string path)
        {
            Process process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    Arguments = $"-File \"{path}\" \"{workDirectory}\" \"{target}\"",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true
                }
            };

            process.Start();
            process.WaitForExit();

            string result = string.Empty;
            if (process.ExitCode == 0)
            {
                runSuccess = true;
                result += $"{Path.GetFileName(path)} successfully finished " + Environment.NewLine;
            }
            else
            {
                result += $"Process failed with exit code: {process.ExitCode}." + Environment.NewLine;
            }

            string output = process.StandardOutput.ReadToEnd();
            string error = process.StandardError.ReadToEnd();
            result += output + "\n" + error;

            return result;
        }

        private string GetSeparator(string text, int length = 100)
        {
            int borderLength = (length - text.Length) / 2;
            int leftBorderLength = borderLength - 1;
            int rightBorderLength = borderLength - 1;

            if (text.Length % 2 != 0)
                rightBorderLength++;

            string leftBorder = new string('-', leftBorderLength);
            string rightBorder = new string('-', rightBorderLength);

            return leftBorder + " " + text + " " + rightBorder;
        }

        private bool IsAnythingChecked(Control container)
        {
            foreach (Control control in container.Controls)
            {
                if (control is CheckBox checkBox && checkBox.Checked)
                {
                    return true;
                }
            }
            return false;
        }

        private void CleanupOutputDirectory()
        {
            string outputsDirectory = Path.Combine(workDirectory, "Outputs");
            if (Directory.Exists(outputsDirectory))
            {
                string[] files = Directory.GetFiles(outputsDirectory);

                foreach (string file in files)
                {
                    string extension = Path.GetExtension(file);
                    if (extension.Equals(".txt", StringComparison.OrdinalIgnoreCase) ||
                        extension.Equals(".xml", StringComparison.OrdinalIgnoreCase))
                    {
                        File.Delete(file);
                    }
                }
            }
        }

        private void ResetLabels()
        {
            ResetLabel(label_nmap);
            ResetLabel(label_sqlmap);
            ResetLabel(label_mimikatz);
            ResetLabel(label_nikto);
            ResetLabel(label_wincmd);
        }

        private void ResetLabel(Label label)
        {
            label.Text = "";
            label.ForeColor = Color.Black;
        }
    }
}