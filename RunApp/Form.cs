using System.Diagnostics;
using System.Text.RegularExpressions;

namespace RunApp
{
    public partial class Form : System.Windows.Forms.Form
    {
        private static string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
        private static string workDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        private static string target = "127.0.0.1";
        private static string outputText = "";
        private static bool runSuccess;

        public Form()
        {
            InitializeComponent();
        }

        private void target_TextChanged(object sender, EventArgs e)
        {
            string text = textBox_target.Text.Trim();

            string pattern = @"^(?:\d{1,3}\.){3}\d{1,3}$";
            Regex regex = new Regex(pattern);

            if (regex.IsMatch(text))
            {
                textBox_target.ForeColor = Color.Green;
                target = textBox_target.Text;
            }
            else
            {
                textBox_target.ForeColor = Color.Red;
                target = "127.0.0.1";
            }
        }

        private void changeWorkDirectory_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = workDirectory;

                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    workDirectory = dialog.SelectedPath;
                }
            }
        }

        private async void run_Click(object sender, EventArgs e)
        {
            buttonRun.Enabled = false;

            ResetLabels();

            bool anyChecked = IsAnythingChecked(tableLayout);
            if (anyChecked)
            {
                await HandleRun("nmap", checkBox_nmap, label_nmap);
                consoleBox.Text += outputText;
                await HandleRun("sqlmap", checkBox_sqlmap, label_sqlmap);
                consoleBox.Text += outputText;
                await HandleRun("mimikatz", checkBox_mimikatz, label_mimikatz);
                consoleBox.Text += outputText;
                await HandleRun("nikto", checkBox_nikto, label_nikto);
                consoleBox.Text += outputText;
                await HandleRun("wincmd", checkBox_wincmd, label_wincmd);
                consoleBox.Text += outputText;

                PDF.Create(workDirectory, postOpen.Checked);
            }
            else
            {
                consoleBox.Text += "Nothing is checked. Please select some tool." + Environment.NewLine;
            }

            buttonRun.Enabled = true;
        }

        private async Task HandleRun(string scriptName, CheckBox checkBox, Label label)
        {
            runSuccess = false;
            outputText = "";

            string scriptPath = $"{baseDirectory}\\Content\\Scripts\\{scriptName}.ps1";

            if (checkBox.Checked)
            {
                label.Text = "Running";
                label.ForeColor = Color.Black;

                outputText = GetSeparator(scriptName) + Environment.NewLine;

                await Task.Run(() => RunScript(scriptPath));

                label.Text = runSuccess ? "Success" : "Failed";
                label.ForeColor = runSuccess ? Color.Green : Color.Red;
            }
        }

        private static void RunScript(string path)
        {
            ProcessStartInfo psi = new ProcessStartInfo
            {
                FileName = "powershell.exe",
                Arguments = $"-File \"{path}\" \"{workDirectory}\" \"{target}\"",
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true
            };

            using (Process? process = Process.Start(psi))
            {
                if (process != null)
                {
                    process.WaitForExit();

                    if (process.ExitCode == 0)
                    {
                        runSuccess = true;

                        while (!process.StandardOutput.EndOfStream)
                        {
                            outputText += process.StandardOutput.ReadLine() + Environment.NewLine;
                        }

                        while (!process.StandardError.EndOfStream)
                        {
                            outputText += process.StandardError.ReadLine() + Environment.NewLine;
                        }
                    }
                    else
                    {
                        outputText += $"Process failed with exit code: {process.ExitCode}." + Environment.NewLine;
                    }
                }
            }
        }

        private static string GetSeparator(string text, int length = 100)
        {
            int borderLength = (length - text.Length) / 2;
            int leftBorderLength = borderLength - 1;
            int rightBorderLength = borderLength - 1;

            if (text.Length % 2 != 0)
                rightBorderLength++;

            string leftBorder = new string('-', leftBorderLength);
            string rightBorder = new string('-', rightBorderLength);

            return leftBorder + " " + text + " " + rightBorder;
        }

        private bool IsAnythingChecked(Control container)
        {
            foreach (Control control in container.Controls)
            {
                if (control is CheckBox checkBox && checkBox.Checked)
                {
                    return true;
                }
            }
            return false;
        }

        private void ResetLabels()
        {
            ResetLabel(label_nmap);
            ResetLabel(label_sqlmap);
            ResetLabel(label_mimikatz);
            ResetLabel(label_nikto);
            ResetLabel(label_wincmd);
        }

        private void ResetLabel(Label label)
        {
            label.Text = "";
            label.ForeColor = Color.Black;
        }
    }
}