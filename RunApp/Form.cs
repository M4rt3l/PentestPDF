using System.Diagnostics;

namespace RunApp
{
    public partial class Form : System.Windows.Forms.Form
    {
        static string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        static string[] scriptPaths = [];
        static string outputText = "";
        static bool runSuccess = false;

        public Form()
        {
            InitializeComponent();
        }

        private async void buttonRun_Click(object sender, EventArgs e)
        {
            buttonRun.Enabled = false;

            scriptPaths = Directory.GetFiles($"{desktopPath}\\Scripts", "*.ps1", SearchOption.AllDirectories);

            await HandleRun("nmap", checkBox_nmap, label_nmap);
            consoleBox.Text += outputText;

            await HandleRun("mimikatz", checkBox_mimikatz, label_mimikatz);
            consoleBox.Text += outputText;

            buttonRun.Enabled = true;
        }

        private async Task HandleRun(string scriptName, CheckBox checkBox, Label label)
        {
            runSuccess = false;

            if (checkBox.Checked)
            {
                label.Text = "Running";
                label.ForeColor = Color.Black;

                outputText = GetSeparator(scriptName) + Environment.NewLine;

                string path = GetValidPath(scriptName);
                await Task.Run(() => RunScript(path));

                label.Text = runSuccess ? "Success" : "Failed";
                label.ForeColor = runSuccess ? Color.Green : Color.Red;
            }
            else
            {
                outputText = "";
            }
        }

        private static void RunScript(string path)
        {
            if (scriptPaths.Contains(path))
            {
                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    Arguments = $"-File \"{path}\"",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true
                };

                using (Process? process = Process.Start(psi))
                {
                    if (process != null)
                    {
                        process.WaitForExit();

                        if (process.ExitCode == 0)
                        {
                            runSuccess = true;

                            while (!process.StandardOutput.EndOfStream)
                            {
                                outputText += process.StandardOutput.ReadLine() + Environment.NewLine;
                            }

                            while (!process.StandardError.EndOfStream)
                            {
                                outputText += process.StandardError.ReadLine() + Environment.NewLine;
                            }
                        }
                        else
                        {
                            outputText += $"Process failed with exit code: {process.ExitCode}." + Environment.NewLine;
                        }
                    }
                }
            }
            else
            {
                string name = Path.GetFileName(path);
                outputText += $"Error: {name} was not found." + Environment.NewLine;
            }
        }

        private static string GetValidPath(string name)
        {
            return Path.Combine(desktopPath, $"Scripts\\{name}.ps1");
        }

        private static string GetSeparator(string text, int length = 100)
        {
            int borderLength = (length - text.Length) / 2;
            int leftBorderLength = borderLength - 1;
            int rightBorderLength = borderLength - 1;

            if (text.Length % 2 != 0)
                rightBorderLength++;

            string leftBorder = new string('-', leftBorderLength);
            string rightBorder = new string('-', rightBorderLength);

            return leftBorder + " " + text + " " + rightBorder;
        }
    }
}