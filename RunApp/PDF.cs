using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.Diagnostics;

namespace RunApp
{
    public class PDF
    {
        public static PdfDocument document;
        public static PdfPage page;
        public static XGraphics gfx;

        public static XFont normalFont = new("Arial", 10, XFontStyle.Regular);
        public static XFont boldFont = new("Arial", 10, XFontStyle.Bold);
        public static double posY = 70;
        public const double padding = 70;
        public static double lastPosX = padding;
        public static int paging = 0;
        public static string champter = "";

        private static void Initialize()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            document = new PdfDocument();
            page = document.AddPage();
            gfx = XGraphics.FromPdfPage(page);
        }

        public static void Create(bool postOpen)
        {
            Initialize();
            ArrangeFirstPage();

            string desktopDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string workDirectory = Path.Combine(desktopDirectory, "Outputs");

            WriteContent(workDirectory);
            Save(desktopDirectory, postOpen);
        }

        private static void ArrangeFirstPage()
        {
            posY = page.Height / 2;
            WriteTitle("Automated pentest report", 0, 0, true, new("Arial", 28, XFontStyle.Bold));
            WriteTitle("Created as part of a diploma thesis", 5, 0, true);
        }

        private static void WriteContent(string workDirectory)
        {
            string[] xmlPaths = Directory.GetFiles(workDirectory, "nmap*.xml");
            foreach (string path in xmlPaths)
            {
                Nmap.WriteXml(path);
            }

            string[] txtPaths = Directory.GetFiles(workDirectory, "*.txt");
            foreach (string path in txtPaths)
            {
                if (path.Contains("mimikatz"))
                {
                    Mimikatz.WriteTxt(path);
                }
            }
        }

        public static void Write(string text, bool bullet = false, XFont? font = null, XBrush? brush = null, double posX = 0)
        {
            posX = posX == 0 ? lastPosX : (padding + posX);
            font = font == null ? normalFont : font;
            brush = brush == null ? XBrushes.Black : brush;

            double stringWidth = 0;
            double charWidth;
            double lineWidth;
            double lineHeight = font.GetHeight();

            if (posY >= page.Height - padding) 
            { 
                NewPage();
                NewLine(lineHeight);
            }

            if (bullet) { posX = WriteBullet(posX); }

            lineWidth = page.Width - posX - padding;

            foreach (char character in text)
            {
                charWidth = gfx.MeasureString(character.ToString(), font).Width;

                if (stringWidth + charWidth > lineWidth)
                {
                    NewLine(lineHeight);

                    if (posY >= page.Height - padding) 
                    { 
                        NewPage();
                        NewLine(lineHeight);
                    }

                    stringWidth = 0;
                }

                gfx.DrawString(character.ToString(), font, brush,
                    new XPoint(posX + stringWidth, posY));

                stringWidth += charWidth;
            }
            lastPosX = posX + stringWidth;
        }

        public static void WriteLine(string text, bool bullet = false, XFont? font = null, XBrush? brush = null, double posX = 0)
        {
            font = font == null ? normalFont : font;
            double lineHeight = font.GetHeight();

            if (posY >= page.Height - padding) { NewPage(); }
            NewLine(lineHeight);
            lastPosX = padding; // reset

            Write(text, bullet, font, brush, posX);
        }

        public static void WriteTitle(string title, double paddingTop = 5, double paddingBottom = 2, bool center = false, XFont? font = null, XBrush? brush = null)
        {
            font = font == null ? new("Arial", 12, XFontStyle.Bold) : font;
            brush = brush == null ? XBrushes.Black : brush;

            NewLine(paddingTop);
            if (center)
            {
                XSize textSize = gfx.MeasureString(title, font);
                double posX = page.Width / 2 - textSize.Width / 2;
                WriteLine($"{title}", false, font, brush, posX - padding);
            }
            else
            {
                WriteLine($"{title}", false, font, brush);
            }
            NewLine(paddingBottom);
        }

        public static void WriteHeader()
        {
            WriteLine($"{champter}", false,
                new XFont("Arial", 20, XFontStyle.Bold),
                XBrushes.Red);
            WriteLine($"Created: {DateTime.Now:dd.MM.yyyy HH:mm:ss}", false,
                new XFont("Arial", 12, XFontStyle.Regular),
                XBrushes.Black);

            paging++;
            string text = $"page {paging}";
            XSize size = gfx.MeasureString(text, normalFont);

            gfx.DrawString(text, boldFont, XBrushes.Black,
                new XPoint(page.Width - padding - size.Width, posY));

            WriteSeparator(5);
        }

        private static void WritePaging()
        {
            paging++;
            string text = $"page {paging}";
            XSize size = gfx.MeasureString(text, normalFont);

            gfx.DrawString(text, boldFont, XBrushes.Black,
                new XPoint(
                    page.Width - padding - size.Width,
                    page.Height - padding + size.Height * 1.25));
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(padding, page.Height - padding),
                new XPoint(page.Width - padding, page.Height - padding));
        }

        private static double WriteBullet(double posX)
        {
            posX += 5;
            gfx.DrawString($"\u2022", normalFont, XBrushes.Black, new XPoint(posX, posY));
            posX += 10;

            return posX;
        }

        public static void WriteSeparator(double space = 0)
        {
            posY += space;
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(padding, posY),
                new XPoint(page.Width - padding, posY));
        }

        public static void NewLine(double lineHeight)
        {
            posY += (lineHeight * 1.25);
        }

        public static void NewPage()
        {
            page = document.AddPage();
            gfx.Dispose();
            gfx = XGraphics.FromPdfPage(page);
            posY = padding; //reset

            //Fitment test
            //gfx.DrawRectangle(XBrushes.Pink, new XRect(
            //    new XPoint(padding, padding),
            //    new XPoint(page.Width - padding, page.Height - padding)
            //    ));

            WritePaging();
            //WriteHeader();
        }

        private static void Save(string outputDirectory, bool openOnClose)
        {
            string outputName = $"report_{DateTime.Now:dd-MM-yyyy_HH-mm}";
            string outputPath = Path.Combine(outputDirectory, $"{outputName}.pdf");

            document.Save(outputPath);
            document.Close();
            if (openOnClose)
            {
                OpenFile(outputPath);
            }
        }

        private static void OpenFile(string path)
        {
            if (File.Exists(path))
            {
                Process.Start("explorer.exe", path);
            }
        }
    }
}