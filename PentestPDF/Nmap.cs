using PdfSharp.Drawing;
using System.Xml;

namespace PentestPDF
{
    public static class Nmap
    {
        private static readonly XmlDocument xml = new();

        public static void WriteXml(string xmlPath)
        {
            // Writing Header
            Creator.WriteLine("NMAP scan report",
                false,
                new XFont("Arial", 20, XFontStyle.Bold),
                XBrushes.Red);
            Creator.WriteLine($"Created: {DateTime.Now:dd.MM.yyyy HH:mm:ss}",
                false,
                new XFont("Arial", 12, XFontStyle.Regular),
                XBrushes.Black);
            Creator.WriteSeparator();

            // Writing XML
            if (xmlPath != null)
            {
                xml.Load(xmlPath);

                Creator.WriteLine("Nmap:", false, new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black, 10);
                WriteAttribute("nmaprun", "version");
                WriteAttribute("nmaprun", "args");
                WriteAttribute("runstats/finished", "elapsed");
                WriteAttribute("runstats/finished", "exit", "state");

                // Writing ports
                Creator.WriteLine("Ports:", false, new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black, 10);
                WritePorts();

                // Writing OS
                Creator.WriteLine("OS Match:", false, new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black, 10);
                WriteOS();

                Creator.WriteLine("OS Ports:", false, new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black, 10);
                WritePortsOS();

                //WriteAll();
            }
        }

        private static void WritePorts()
        {
            XmlNodeList portNodes = xml.GetElementsByTagName("port");

            foreach (XmlNode node in portNodes)
            {
                string protocol = GetAttributeValue(node, "protocol");
                string portid = GetAttributeValue(node, "portid");

                XmlNode? stateNode = node.SelectSingleNode("state");
                string state = stateNode != null ? GetAttributeValue(stateNode, "state") : "none";

                XmlNode? serviceNode = node.SelectSingleNode("service");
                string service = serviceNode != null ? GetAttributeValue(serviceNode, "name") : "none";

                //WriteLine($"protocol: {protocol}, id: {portid}, state: {state}, service: {service}");
                Creator.WriteLine($"protocol: {protocol}");
                Creator.Write($"id: {portid}", Creator.padding + 90);
                Creator.Write($"state: {state}", Creator.padding + 160);
                Creator.Write($"service: {service}", Creator.padding + 240);
            }
        }

        private static void WriteOS()
        {
            XmlNodeList osmatchNodes = xml.GetElementsByTagName("osmatch");

            foreach (XmlNode node in osmatchNodes)
            {
                string name = GetAttributeValue(node, "name");
                string accuracy = GetAttributeValue(node, "accuracy");

                Creator.WriteLine($"{name} (accuracy: {accuracy}%)");
            }
        }

        private static void WritePortsOS()
        {
            XmlNodeList portNodes = xml.GetElementsByTagName("portused");

            foreach (XmlNode node in portNodes)
            {
                string protocol = GetAttributeValue(node, "proto");
                string portid = GetAttributeValue(node, "portid");
                string state = GetAttributeValue(node, "state");

                //WriteLine($"protocol: {protocol}, id: {portid}, state: {state}");
                Creator.WriteLine($"protocol: {protocol}");
                Creator.Write($"id: {portid}", Creator.padding + 90);
                Creator.Write($"state: {state}", Creator.padding + 160);
            }
        }

        private static void WriteAllNodes(XmlNode node, double indent)
        {
            double indentStep = 10;

            Creator.WriteLine($"{node.Name}: {node.Value}",
                true, Creator.normalFont, XBrushes.Black, 5,
                Creator.padding + indent);

            if (node.Attributes != null)
            {
                foreach (XmlAttribute attribute in node.Attributes)
                {
                    Creator.WriteLine($"{attribute.Name}: {attribute.Value}",
                        true, Creator.normalFont, XBrushes.Black, 5,
                        Creator.padding + indent + indentStep);
                }
            }

            // Display child nodes recursively
            foreach (XmlNode childNode in node.ChildNodes)
            {
                WriteAllNodes(childNode, indent + indentStep);
            }
        }

        private static void WriteAll()
        {
            if (xml.DocumentElement != null)
            {
                Creator.NewPage();
                WriteAllNodes(xml.DocumentElement, 0);
            }
        }

        private static void WriteAttribute(string elementName, string attributeName, string newName = "")
        {
            XmlNode? elementNode = xml.SelectSingleNode($"//{elementName}");
            if (elementNode != null)
            {
                string attributeValue = GetAttributeValue(elementNode, attributeName);
                string name = newName != "" ? newName : attributeName;
                Creator.WriteLine($"{name}: {attributeValue}");
            }
        }

        private static string GetAttributeValue(XmlNode node, string name)
        {
            string value = "not found";

            if (node != null)
            {
                XmlAttributeCollection? collection = node.Attributes;
                if (collection != null)
                {
                    XmlAttribute? attribute = collection[name];
                    if (attribute != null)
                    {
                        value = attribute.Value;
                    }
                }
            }

            return value;
        }
    }
}