using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.Diagnostics;
using System.Xml;

public class Program
{
    private static PdfDocument? document;
    private static PdfPage? page;
    private static double position;
    private static double padding;

    public static void Main()
    {
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        string xmlPath = Path.Combine(desktopPath, "Pentest Reports\\output.xml");
        string outputPath = Path.Combine(desktopPath, "Pentest Reports\\output.pdf");

        // Creating document
        document = new PdfDocument();
        page = document.AddPage();
        position = 70;
        padding = 70;

        // Writing Header
        using (XGraphics gfx = XGraphics.FromPdfPage(page))
        {
            gfx.DrawString("NMAP scan report",
                new XFont("Arial", 20, XFontStyle.Bold),
                XBrushes.Red,
                new XPoint(padding, position));
            position += 30;
            gfx.DrawString($"Created: {DateTime.Today:yyyy-MM-dd}",
                new XFont("Arial", 14, XFontStyle.Regular), 
                XBrushes.Red,
                new XPoint(padding, position));
            position += 20;
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(70, position),
                new XPoint(page.Width - padding, position));
        }

        // Writing XML
        if (xmlPath != null)
        {
            XmlDocument xml = new XmlDocument();
            xml.Load(xmlPath);

            // Writing OS
            XmlNodeList osNodes = xml.GetElementsByTagName("osclass");
            WriteOS(osNodes);

            // Writing ports
            XmlNodeList portNodes = xml.GetElementsByTagName("port");
            WritePorts(portNodes);

            // Writing all
            if (xml.DocumentElement != null)
            {
                NewPage();
                WriteAllNodes(xml.DocumentElement, 0);
            }
        }

        // Saving
        document.Save(outputPath);
        document.Close();
        OpenFile(outputPath);
    }

    public static void WriteOS(XmlNodeList osNodes)
    {
        using (XGraphics gfx = XGraphics.FromPdfPage(page))
        {
            position += 30;
            gfx.DrawString("OS:", new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black, new XPoint(padding, position));
        }

        XFont font = new XFont("Arial", 10, XFontStyle.Regular);
        double lineHeight = font.GetHeight();

        foreach (XmlNode node in osNodes)
        {
            string vendor = node.Attributes["vendor"].Value;
            string osfamily = node.Attributes["osfamily"].Value;
            string osgen = node.Attributes["osgen"].Value;
            string accuracy = node.Attributes["accuracy"].Value;

            position += lineHeight + 10;
            WriteLine($"Vendor: {vendor}", font, padding, position);
            position += lineHeight + 10;
            WriteLine($"Generation: {osfamily} {osgen}", font, padding, position);
            position += lineHeight + 10;
            WriteLine($"Accuracy: {accuracy}%", font, padding, position);
        }
    }

    public static void WritePorts(XmlNodeList portNodes)
    {
        using (XGraphics gfx = XGraphics.FromPdfPage(page))
        {
            position += 30;
            gfx.DrawString("Ports:", new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black, new XPoint(padding, position));
        }

        XFont font = new XFont("Arial", 10, XFontStyle.Regular);
        double lineHeight = font.GetHeight();

        foreach (XmlNode portNode in portNodes)
        {
            string protocol = portNode.Attributes["protocol"].Value;
            string portid = portNode.Attributes["portid"].Value;

            XmlNode stateNode = portNode.SelectSingleNode("state");
            string state = stateNode.Attributes["state"].Value;

            string line = $"Protocol: {protocol}, PortID: {portid}, State: {state}";

            position += lineHeight + 10;
            WriteLine(line, font, padding, position);
        }
    }

    public static void WriteAllNodes(XmlNode node, double indent)
    {
        XFont font = new XFont("Arial", 10, XFontStyle.Regular);
        double lineHeight = font.GetHeight();
        double indentStep = 30;

        position += lineHeight + 10;
        WriteLine($"{node.Name}: {node.Value}", font, padding + indent, position);

        if (node.Attributes != null)
        {
            foreach (XmlAttribute attribute in node.Attributes)
            {
                position += lineHeight + 10;
                WriteLine($"{attribute.Name}: {attribute.Value}", font, padding + indent + indentStep, position);
            }
        }

        // Display child nodes recursively
        foreach (XmlNode childNode in node.ChildNodes)
        {
            WriteAllNodes(childNode, indent + indentStep);
        }
    }

    public static void WriteLine(string text, XFont font, double posX,  double posY)
    {
        if (position > page.Height - padding)
        {
            NewPage();
        }

        using (XGraphics gfx = XGraphics.FromPdfPage(page))
        {
            gfx.DrawString($"\u2022", font, XBrushes.Black, new XPoint(posX, posY));
            gfx.DrawString($"{text}", font, XBrushes.Black, new XPoint(posX + 10, posY));
        }
    }

    public static void NewPage()
    {
        page = new PdfPage();
        document.AddPage(page);
        position = padding; //reset
    }

    public static void OpenFile(string path)
    {
        if (File.Exists(path))
        {
            Process.Start("explorer.exe", path);
        }
    }
}
