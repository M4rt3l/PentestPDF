using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.Diagnostics;
using System.Xml;

public class Program
{
    public static void Main()
    {
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        string xmlPath = "C:\\Users\\mmart\\Documents\\Pentest Reports\\output.xml";
        string outputPath = "C:\\Users\\mmart\\Documents\\Pentest Reports\\output.pdf";

        // Creating document
        PdfDocument document = new PdfDocument();
        PdfPage page = document.AddPage();
        double position = 70;
        double padding = 70;

        // Writing Header
        using (XGraphics gfx = XGraphics.FromPdfPage(page))
        {
            XFont font = new XFont("Arial", 14, XFontStyle.Regular);
            double lineHeight = font.GetHeight() + 10;

            gfx.DrawString($"Release date: {DateTime.Today:yyyy-MM-dd}",
                font, XBrushes.Red,
                new XPoint(padding, position));
            position += lineHeight;
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(70, position),
                new XPoint(page.Width - padding, position));
            position += 10;
        }

        // Writing XML
        if (xmlPath != null)
        {
            XmlDocument xml = new XmlDocument();
            xml.Load(xmlPath);

            if (xml.DocumentElement != null)
            {
                WriteNodes(xml.DocumentElement, padding, 0, ref document, ref page, ref position);
            }
        }

        // Saving
        document.Save(outputPath);
        document.Close();
        OpenFile(outputPath);
    }

    public static void WriteNodes(XmlNode node, double padding, double indent,
        ref PdfDocument document, ref PdfPage page, ref double position)
    {
        XFont font = new XFont("Arial", 10, XFontStyle.Regular);
        double lineHeight = font.GetHeight();
        double indentStep = 30;

        position += lineHeight + 10;
        if (position > page.Height - padding)
        {
            page = new PdfPage();
            document.AddPage(page);
            position = padding; //reset
        }
        WriteLine($"{node.Name}: {node.Value}", ref page, font, padding + indent, position);

        if (node.Attributes != null)
        {
            foreach (XmlAttribute attribute in node.Attributes)
            {
                position += lineHeight + 10;
                if (position > page.Height - padding)
                {
                    page = new PdfPage();
                    document.AddPage(page);
                    position = padding; //reset
                }
                WriteLine($"{attribute.Name}: {attribute.Value}", ref page, font, padding + indent + indentStep, position);
            }
        }

        // Display child nodes recursively
        foreach (XmlNode childNode in node.ChildNodes)
        {
            WriteNodes(childNode, padding, indent + indentStep,
                ref document, ref page, ref position);
        }
    }

    public static void WriteLine(string text, ref PdfPage page, XFont font, double posX,  double posY)
    {
        using (XGraphics gfx = XGraphics.FromPdfPage(page))
        {
            gfx.DrawString($"\u2022", font, XBrushes.Black, new XPoint(posX, posY));
            gfx.DrawString($"{text}", font, XBrushes.Black, new XPoint(posX + 10, posY));
        }
    }

    public static void OpenFile(string path)
    {
        if (File.Exists(path))
        {
            Process.Start("explorer.exe", path);
        }
    }
}
