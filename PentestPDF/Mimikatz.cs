using PdfSharp.Drawing;
using System.Text.RegularExpressions;

namespace PentestPDF
{
    public static class Mimikatz
    {
        public static void WriteTxt(string txtPath)
        {
            // Writing Header
            Creator.WriteLine("Mimikatz scan report",
                false,
                new XFont("Arial", 20, XFontStyle.Bold),
                XBrushes.Blue);
            Creator.WriteLine($"Created: {DateTime.Now:dd.MM.yyyy HH:mm:ss}",
                false,
                new XFont("Arial", 12, XFontStyle.Regular),
                XBrushes.Black);
            Creator.WriteSeparator();

            if (txtPath != null )
            {
                string[] lines = File.ReadAllLines(txtPath);

                string[] propertyNames = { "Authentication Id", "User Name", "Domain", "SID" };
                bool spaceEnabled = false;

                for (int i = 0; i < lines.Length; i++)
                {
                    string previous = i > 0 ? lines[i - 1] : string.Empty;
                    string line = lines[i];
                    string next = i < lines.Length - 1 ? lines[i + 1] : string.Empty;

                    string L1 = @"^((?:\w+\s)*\w+)\s*:\s*(.*)"; // multiple words : anything
                    string L2 = @"^\s*(\w+)\s*:\s*$";           // word : 
                    string L3 = @"^\s*\*\s*(\w+)\s*:\s*(.*)";   // * word : anything

                    string output = string.Empty;

                    if (Regex.IsMatch(line, @"^\s*$") && Regex.IsMatch(next, L1) && spaceEnabled)
                    {
                        //Creator.NewLine(20);
                        Creator.WriteSeparator();
                    }

                    Match match_L1 = Regex.Match(line, L1);
                    if (match_L1.Success)
                    {
                        string name = match_L1.Groups[1].Value;
                        if (propertyNames.Contains(name))
                        {
                            output = $"{match_L1.Groups[1].Value}: {match_L1.Groups[2].Value}";
                            Creator.WriteLine(output, false);
                        }

                        spaceEnabled = true;
                    }

                    Match match_L2 = Regex.Match(line, L2);
                    if (match_L2.Success)
                    {
                        if (Regex.IsMatch(next, L3))
                        {
                            output = $"{match_L2.Groups[1].Value}:";
                            Creator.WriteLine(output, true, Creator.normalFont, XBrushes.Black, 5, 70+10);
                        }
                    }

                    Match match_L3 = Regex.Match(line, L3);
                    if (match_L3.Success)
                    {
                        string[] discard = { "Username", "Domain" };
                        if (!discard.Contains(match_L3.Groups[1].Value))
                        {
                            output = $"{match_L3.Groups[1].Value}: {match_L3.Groups[2].Value}";
                            Creator.WriteLine(output, true, Creator.normalFont, XBrushes.Black, 5, 70+20);
                        }
                    }
                }
            }

        }
    }
}