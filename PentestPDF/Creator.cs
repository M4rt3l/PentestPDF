using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.Diagnostics;

namespace PentestPDF
{
    public class Creator
    {
        public static PdfDocument document = new();
        public static PdfPage page = document.AddPage();
        public static XGraphics gfx = XGraphics.FromPdfPage(page);
        public static XFont normalFont = new("Arial", 10, XFontStyle.Regular);
        public static XFont boldFont = new("Arial", 10, XFontStyle.Bold);
        public static double posY = 70;
        public static double tempPosX = 0;
        public const double padding = 70;

        public static void Main()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string xmlName = "nmap_13-03-2024_17-15";
            string xmlPath = Path.Combine(desktopPath, $"Reports\\{xmlName}.xml");
            string txtName = "mimikatz_14-03-2024_18-59";
            string txtPath = Path.Combine(desktopPath, $"Reports\\{txtName}.txt");

            // Fitment test
            //gfx.DrawRectangle(XBrushes.Pink, new XRect(
            //    new XPoint(padding, padding),
            //    new XPoint(page.Width - padding, page.Height - padding)
            //    ));

            Nmap.WriteXml(xmlPath);
            NewPage();
            Mimikatz.WriteTxt(txtPath);

            string outputName = $"report_{DateTime.Now:dd-MM-yyyy_HH-mm}";
            string outputPath = Path.Combine(desktopPath, $"Reports\\{outputName}.pdf");

            // Saving
            document.Save(outputPath);
            document.Close();
            OpenFile(outputPath);
        }

        public static void Write(string text, double posX = 0, XFont? font = null, XBrush? brush = null)
        {
            font = font == null ? normalFont : font;
            brush = brush == null ? XBrushes.Black : brush;

            double lineHeight = font.GetHeight();
            double lineWidth = page.Width - posX - padding;
            double textWidth = gfx.MeasureString(text.ToString(), font).Width;

            if (textWidth >= lineWidth)
            {
                if (posY > page.Height - padding)
                {
                    NewPage();
                }

                posY += (lineHeight * 1.5); // newline
            }

            gfx.DrawString(text, font, brush, new XPoint(posX, posY));

            tempPosX = posX + textWidth;
        }

        public static void WriteLine(string text, bool bullet = false, XFont? font = null, XBrush? brush = null, double posX = 0)
        {
            posX = posX == 0 ? padding : posX;
            font = font == null ? normalFont : font;
            brush = brush == null ? XBrushes.Black : brush;

            if (posY > page.Height - padding)
            {
                NewPage();
            }

            double charWidth;
            double stringWidth = 0;
            double lineWidth = page.Width - posX - padding;
            double lineHeight = font.GetHeight();
            posY += (lineHeight * 1.5); // newline

            if (bullet)
            {
                posX += 5;
                gfx.DrawString($"\u2022", normalFont, XBrushes.Black, new XPoint(posX, posY));
                posX += 10; // space for bullet
            }

            foreach (char character in text)
            {
                if (stringWidth >= lineWidth)
                {
                    if (posY > page.Height - padding)
                    {
                        NewPage();
                    }

                    posY += (lineHeight * 1.5); // newline
                    stringWidth = 0;
                }

                gfx.DrawString(character.ToString(), font, brush,
                    new XPoint(posX + stringWidth, posY));

                charWidth = gfx.MeasureString(character.ToString(), font).Width;
                stringWidth += charWidth;
            }
            tempPosX = posX + stringWidth;
        }

        public static void WriteSeparator()
        {
            posY += 5;
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(padding, posY),
                new XPoint(page.Width - padding, posY));
        }

        public static void NewPage()
        {
            page = new PdfPage();
            document.AddPage(page);
            gfx.Dispose();
            gfx = XGraphics.FromPdfPage(page);
            posY = padding; //reset
        }

        public static void NewLine(int lineHeight)
        {
            posY += lineHeight;
        }

        public static void OpenFile(string path)
        {
            if (File.Exists(path))
            {
                Process.Start("explorer.exe", path);
            }
        }
    }
}