using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.Diagnostics;
using System.Drawing;

namespace PentestPDF
{
    public class Creator
    {
        public static PdfDocument document = new();
        public static PdfPage page = document.AddPage();
        public static XGraphics gfx = XGraphics.FromPdfPage(page);
        public static XFont normalFont = new("Arial", 10, XFontStyle.Regular);
        public static XFont boldFont = new("Arial", 10, XFontStyle.Bold);
        public static double posY = 70;
        public const double padding = 70;
        public static double lastPosX = padding;
        public static int paging = 0;

        public static void Main()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string xmlName = "nmap_13-03-2024_17-15";
            string xmlPath = Path.Combine(desktopPath, $"Reports\\{xmlName}.xml");
            string txtName = "mimikatz_14-03-2024_18-59";
            string txtPath = Path.Combine(desktopPath, $"Reports\\{txtName}.txt");

            //Fitment test
            //gfx.DrawRectangle(XBrushes.Pink, new XRect(
            //    new XPoint(padding, padding),
            //    new XPoint(page.Width - padding, page.Height - padding)
            //    ));


            WritePaging();
            Nmap.WriteXml(xmlPath);
            NewPage();
            Mimikatz.WriteTxt(txtPath);

            string outputName = $"report_{DateTime.Now:dd-MM-yyyy_HH-mm}";
            string outputPath = Path.Combine(desktopPath, $"Reports\\{outputName}.pdf");

            document.Save(outputPath);
            document.Close();
            OpenFile(outputPath);
        }

        public static void Write(string text, bool bullet = false, XFont? font = null, XBrush? brush = null, double posX = 0)
        {
            posX = posX == 0 ? lastPosX : (padding + posX);
            font = font == null ? normalFont : font;
            brush = brush == null ? XBrushes.Black : brush;

            double charWidth;
            double stringWidth = 0;
            double lineWidth = page.Width - posX - padding;
            double lineHeight = font.GetHeight();

            if (posY > page.Height - padding) { NewPage(); }

            if (bullet) { posX = WriteBullet(posX); }

            foreach (char character in text)
            {
                if (stringWidth >= lineWidth)
                {
                    if (posY > page.Height - padding) { NewPage(); }
                    NewLine(lineHeight);
                    stringWidth = 0;
                }

                gfx.DrawString(character.ToString(), font, brush,
                    new XPoint(posX + stringWidth, posY));

                charWidth = gfx.MeasureString(character.ToString(), font).Width;
                stringWidth += charWidth;
            }
            lastPosX = posX + stringWidth;
        }

        public static void WriteLine(string text, bool bullet = false, XFont? font = null, XBrush? brush = null, double posX = 0)
        {
            font = font == null ? normalFont : font;
            double lineHeight = font.GetHeight();

            NewLine(lineHeight);
            lastPosX = padding; // reset

            Write(text, bullet, font, brush, posX);
        }

        public static void WriteTitle(string title, double paddingTop = 5, double paddingBottom = 2)
        {
            NewLine(paddingTop);
            WriteLine($"{title}:", false, new XFont("Arial", 12, XFontStyle.Bold), XBrushes.Black);
            NewLine(paddingBottom);
        }

        public static double WriteBullet(double posX)
        {
            posX += 5;
            gfx.DrawString($"\u2022", normalFont, XBrushes.Black, new XPoint(posX, posY));
            posX += 10;

            return posX;
        }

        public static void WriteSeparator(double space = 0)
        {
            posY += space;
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(padding, posY),
                new XPoint(page.Width - padding, posY));
        }

        public static void NewLine(double lineHeight)
        {
            posY += (lineHeight * 1.25);
        }

        public static void WritePaging()
        {
            paging++;
            string text = $"page {paging}";
            XSize size = gfx.MeasureString(text, normalFont);

            gfx.DrawString(text, boldFont, XBrushes.Black,
                new XPoint(
                    page.Width - padding - size.Width, 
                    page.Height - padding + size.Height * 1.25));
            gfx.DrawLine(new XPen(XColors.Black, 0.5),
                new XPoint(padding, page.Height - padding),
                new XPoint(page.Width - padding, page.Height - padding));
        }

        public static void NewPage()
        {
            page = new PdfPage();
            document.AddPage(page);
            gfx.Dispose();
            gfx = XGraphics.FromPdfPage(page);
            posY = padding; //reset

            WritePaging();
        }

        public static void OpenFile(string path)
        {
            if (File.Exists(path))
            {
                Process.Start("explorer.exe", path);
            }
        }
    }
}