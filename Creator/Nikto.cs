using PdfSharp.Drawing;
using System.Text.RegularExpressions;

namespace Creator
{
    class Nikto
    {
        static List<(string, string, string)> records = new();
        static string version = "";
        static string host = "";
        static string port = "";

        public static void AddReport(string niktoPath)
        {
            Creator.NewPage();

            Creator.WriteLine("Nikto scan report", false,
                new XFont("Arial", 20, XFontStyle.Bold),
                XBrushes.Orange);
            Creator.WriteLine($"Created: {DateTime.Now:dd.MM.yyyy HH:mm:ss}", false,
                new XFont("Arial", 12, XFontStyle.Regular),
                XBrushes.Black);
            Creator.WriteSeparator(5);

            ReadTxt(niktoPath);
            WriteRecords();
        }

        public static void WriteRecords()
        {
            Creator.WriteTitle("Nikto: ");
            Creator.WriteLine("Version: ", true, Creator.boldFont);
            Creator.Write(version);
            Creator.WriteLine($"Target: ", true, Creator.boldFont);
            Creator.Write($"{host}:");
            Creator.Write(port, false, Creator.normalFont, XBrushes.Orange);

            Creator.WriteTitle("Records: ");
            foreach (var record in records)
            {
                Creator.WriteLine($"{record.Item1}", true, Creator.boldFont, XBrushes.Orange);
                Creator.Write($": {record.Item2}.");
                if (record.Item3 != "")
                {
                    Creator.WriteLine($"(Note: {record.Item3})", false, Creator.normalFont, XBrushes.Navy, 15);
                }
            }
        }

        public static void ReadTxt(string niktoPath)
        {
            if (niktoPath != null)
            {
                string[] lines = File.ReadAllLines(niktoPath);

                //string pattern = @"\+\sHEAD\s(?<filePath>[^:]+)\:\s(?<message>[^.]+)\.\s\(NOTE:\s(?<note>[^)]+)\)";
                string pattern_record = @"\+ HEAD\s([^:]+)\:\s([^.]+)\.(?:\s\(NOTE:\s([^)]+)\))?";
                string pattern_version = @"Nikto v(\d+\.\d+\.\d+)";
                string pattern_host = @"Target Host:\s([\d.]+)";
                string pattern_port = @"Target Port:\s(\d+)";

                foreach (string line in lines)
                {
                    Match match_record = Regex.Match(line, pattern_record);
                    Match match_version = Regex.Match(line, pattern_version);
                    Match match_host = Regex.Match(line, pattern_host);
                    Match match_port = Regex.Match(line, pattern_port);

                    if (match_record.Success)
                    {
                        string filePath = match_record.Groups[1].Value;
                        string message = match_record.Groups[2].Value;
                        string note = match_record.Groups[3].Value;

                        records.Add((filePath, message, note));
                    }
                    else if (match_version.Success)
                    {
                        version = match_version.Groups[1].Value;
                    }
                    else if (match_host.Success)
                    {
                        host = match_host.Groups[1].Value;
                    }
                    else if (match_port.Success)
                    {
                        port = match_port.Groups[1].Value;
                    }
                }
            }
        }

    }
}
