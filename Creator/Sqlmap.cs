using PdfSharp.Drawing;
using System.Text.RegularExpressions;

namespace Creator
{
    class Sqlmap
    {
        static List<Element> urls = new List<Element>();
        static string version = "";

        public static void AddReport(string path)
        {
            if(path != null)
            {
                Creator.champterName = "SQLmap";
                Creator.champterColor = XBrushes.Green;
                Creator.NewPage(true);

                ReadTxt(path);

                Creator.WriteTitle("SQLmap: ");
                Creator.WriteLine("Version: ", true, Creator.boldFont);
                Creator.Write(version);

                WriteRecords();
            }
        }

        public static void WriteRecords()
        {
            int counter = 0;
            Creator.WriteTitle("Records: ");
            foreach (var url in urls)
            {
                counter++;
                Creator.WriteLine($"URL {counter}: ", true, Creator.boldFont);
                Creator.Write(url.Value);

                foreach (Element child in url.Children)
                {
                    XBrush color;
                    if (child.Name == "INFO") { color = XBrushes.DodgerBlue; }
                    else if (child.Name == "WARNING") { color = XBrushes.Goldenrod; }
                    else if (child.Name == "ERROR") { color = XBrushes.Red; }
                    else { color = XBrushes.Black; }

                    Creator.WriteLine($"[{child.Name}] ", 
                        false, Creator.normalFont, color, 15);
                    Creator.Write(child.Value);
                }
                Creator.NewLine(5);
            }
        }

        public static void ReadTxt(string sqlmapPath)
        {
            if (sqlmapPath != null)
            {
                string[] lines = File.ReadAllLines(sqlmapPath);

                Element activeRecord = new();
                bool hasUrl = false;

                string pattern_version = @"\{([\d.]+)\#\w+\}";
                string pattern_url = @"GET http://(.*)";
                string pattern = @"\[[^\]]+\]\s\[([^\]]+)\]\s(.*)";
                string pattern_end = @"\[\d+\/\d+\]\s\w+\:";

                foreach (string line in lines)
                {
                    Match match_version = Regex.Match(line, pattern_version);
                    Match match_end = Regex.Match(line, pattern_end);
                    Match match_url = Regex.Match(line, pattern_url);
                    Match match = Regex.Match(line, pattern);

                    if (match_end.Success)
                    {
                        if (hasUrl)
                        {
                            urls.Add(activeRecord);
                        }
                    }
                    else if (match_url.Success)
                    {
                        activeRecord = new Element("", match_url.Groups[1].Value);
                        hasUrl = true;
                    }
                    else if (match.Success)
                    {
                        Element child = new Element(match.Groups[1].Value, match.Groups[2].Value);
                        activeRecord.AddChild(child);
                    }
                    else if (match_version.Success)
                    {
                        version = match_version.Groups[1].Value;
                    }
                }
            }
        }
    }
}
