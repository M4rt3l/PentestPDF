using PdfSharp.Drawing;
using System.Text.RegularExpressions;

namespace ConsoleApp
{
    class Nikto
    {
        static string? version;
        static string? host;
        static string? port;

        public static void AddReport(string path)
        {
            if (path != null)
            {
                PDFCreator.champterName = "Nikto";
                PDFCreator.champterColor = XBrushes.Goldenrod;
                PDFCreator.NewPage(true);

                List<(string, string, string)> records = ReadTxt(path);
                WriteRecords(records);
            }
        }

        public static void WriteRecords(List<(string, string, string)> records)
        {
            PDFCreator.WriteTitle("Nikto: ");
            if (version != null)
            {
                PDFCreator.WriteLine("Version: ", true, PDFCreator.boldFont);
                PDFCreator.Write(version);
            }

            if (host != null && port != null)
            {
                PDFCreator.WriteLine($"Target: ", true, PDFCreator.boldFont);
                PDFCreator.Write($"{host}:");
                PDFCreator.Write(port, false, PDFCreator.normalFont, PDFCreator.champterColor);
            }

            if (records != null)
            {
                PDFCreator.WriteTitle("Records: ");
                foreach (var record in records)
                {
                    PDFCreator.WriteLine($"{record.Item1}", true, PDFCreator.boldFont, PDFCreator.champterColor);
                    PDFCreator.Write($": {record.Item2}.");
                    if (record.Item3 != "")
                    {
                        PDFCreator.WriteLine($"(Note: {record.Item3})", false, PDFCreator.normalFont, XBrushes.DodgerBlue, 15);
                    }
                }
            }
        }

        public static List<(string, string, string)> ReadTxt(string niktoPath)
        {

            string[] lines = File.ReadAllLines(niktoPath);
            List<(string, string, string)> records = new();

            string pattern_record = @"\+ HEAD\s([^:]+)\:\s([^.]+)\.(?:\s\(NOTE:\s([^)]+)\))?";
            string pattern_version = @"Nikto v([\d.]+)";
            string pattern_host = @"Target Host:\s([\d.]+)";
            string pattern_port = @"Target Port:\s(\d+)";

            foreach (string line in lines)
            {
                Match match_record = Regex.Match(line, pattern_record);
                Match match_version = Regex.Match(line, pattern_version);
                Match match_host = Regex.Match(line, pattern_host);
                Match match_port = Regex.Match(line, pattern_port);

                if (match_record.Success)
                {
                    string filePath = match_record.Groups[1].Value;
                    string message = match_record.Groups[2].Value;
                    string note = match_record.Groups[3].Value;

                    records.Add((filePath, message, note));
                }
                else if (match_version.Success)
                {
                    version = match_version.Groups[1].Value;
                }
                else if (match_host.Success)
                {
                    host = match_host.Groups[1].Value;
                }
                else if (match_port.Success)
                {
                    port = match_port.Groups[1].Value;
                }
            }
            return records;
        }

    }
}
