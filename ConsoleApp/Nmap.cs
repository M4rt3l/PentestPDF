using PdfSharp.Drawing;
using System.Text.RegularExpressions;
using System.Xml;

namespace ConsoleApp
{
    public static class Nmap
    {
        private static readonly XmlDocument xml = new();

        public static void AddReport(string path)
        {
            if (path != null)
            {
                PDFCreator.champterName = "Nmap";
                PDFCreator.champterColor = XBrushes.Red;
                PDFCreator.NewPage(true);

                xml.Load(path);
                WriteRunInfo();
                WritePorts();
                WriteOS();
                WritePortsOS();
            }
        }

        private static void WriteRunInfo()
        {
            string version = GetAttributeValue("nmaprun", "version");
            string args = GetAttributeValue("nmaprun", "args");
            string elapsed = GetAttributeValue("runstats/finished", "elapsed");
            string exit = GetAttributeValue("runstats/finished", "exit");

            XBrush color;
            if (exit == "success") { color = XBrushes.Green; }
            else { color = XBrushes.Red; }

            PDFCreator.WriteTitle("Nmap: ");
            PDFCreator.WriteLine("Version: ", true, PDFCreator.boldFont);
            PDFCreator.Write(version);
            args = args.Replace("\\\\", "\\");
            args = ParseArgs(args);
            PDFCreator.WriteLine("Args: ", true, PDFCreator.boldFont);
            PDFCreator.WriteLine(args, false, PDFCreator.normalFont, XBrushes.Black, 15);
            PDFCreator.WriteLine("Elapsed: ", true, PDFCreator.boldFont);
            PDFCreator.Write($"{elapsed} s");
            PDFCreator.WriteLine("Exit: ", true, PDFCreator.boldFont);
            PDFCreator.Write(exit, false, PDFCreator.normalFont, color);
        }

        private static string ParseArgs(string args)
        {
            // [^\"]+ : one or more characters that are not a quotation mark
            string pattern = "\"([^\"]+)\"\\s*(.*)";
            Match match = Regex.Match(args, pattern);
            if (match.Success)
            {
                string path = match.Groups[1].Value;
                args = $"nmap {match.Groups[2].Value}";
                PDFCreator.WriteLine("Path: ", true, PDFCreator.boldFont);
                PDFCreator.Write(path);
            }
            return args;
        }

        private static void WritePorts()
        {
            XmlNodeList portNodes = xml.GetElementsByTagName("port");
            XBrush stateColor;

            if (portNodes.Count > 0)
            {
                PDFCreator.WriteTitle("Ports: ");

                foreach (XmlNode node in portNodes)
                {
                    string protocol = GetAttributeValue(node, "protocol");
                    string portid = GetAttributeValue(node, "portid");

                    XmlNode? stateNode = node.SelectSingleNode("state");
                    string state = stateNode != null ? GetAttributeValue(stateNode, "state") : "none";

                    XmlNode? serviceNode = node.SelectSingleNode("service");
                    string service = serviceNode != null ? GetAttributeValue(serviceNode, "name") : "none";

                    PDFCreator.WriteLine($"protocol: ", true, PDFCreator.boldFont);
                    PDFCreator.Write(protocol);
                    PDFCreator.Write($"id: ", false, PDFCreator.boldFont, XBrushes.Black, 90);
                    PDFCreator.Write(portid);

                    if (state == "open") { stateColor = XBrushes.Red; }
                    else if (state == "closed") { stateColor = XBrushes.Green; }
                    else { stateColor = XBrushes.Black; }

                    PDFCreator.Write($"state: ", false, PDFCreator.boldFont, XBrushes.Black, 160);
                    PDFCreator.Write(state, false, PDFCreator.normalFont, stateColor);
                    PDFCreator.Write($"service: ", false, PDFCreator.boldFont, XBrushes.Black, 240);
                    PDFCreator.Write(service);
                }
            }
        }

        private static void WriteOS()
        {
            XmlNodeList osmatchNodes = xml.GetElementsByTagName("osmatch");

            if (osmatchNodes.Count > 0)
            {
                PDFCreator.WriteTitle("OS Match: ");

                foreach (XmlNode node in osmatchNodes)
                {
                    string name = GetAttributeValue(node, "name");
                    string accuracy = GetAttributeValue(node, "accuracy");

                    PDFCreator.WriteLine($"{name} ", true);
                    PDFCreator.Write("| ", false, PDFCreator.boldFont, XBrushes.Purple);
                    PDFCreator.Write($"accuracy: {accuracy}%");
                }
            }
        }

        private static void WritePortsOS()
        {
            XmlNodeList portNodes = xml.GetElementsByTagName("portused");
            XBrush stateColor;

            if (portNodes.Count > 0)
            {
                PDFCreator.WriteTitle("OS Ports: ");

                foreach (XmlNode node in portNodes)
                {
                    string protocol = GetAttributeValue(node, "proto");
                    string portid = GetAttributeValue(node, "portid");
                    string state = GetAttributeValue(node, "state");

                    PDFCreator.WriteLine($"protocol: ", true, PDFCreator.boldFont);
                    PDFCreator.Write(protocol);
                    PDFCreator.Write($"id: ", false, PDFCreator.boldFont, XBrushes.Black, 90);
                    PDFCreator.Write(portid);

                    if (state == "open") { stateColor = XBrushes.Red; }
                    else if (state == "closed") { stateColor = XBrushes.Green; }
                    else { stateColor = XBrushes.Black; }

                    PDFCreator.Write($"state: ", false, PDFCreator.boldFont, XBrushes.Black, 160);
                    PDFCreator.Write(state, false, PDFCreator.normalFont, stateColor);
                }
            }
        }

        private static void WriteAllNodes(XmlNode node, double indent = 0)
        {
            double indentStep = 15;

            PDFCreator.WriteLine($"{node.Name}: {node.Value}",
                true, PDFCreator.normalFont, XBrushes.Black, indent);

            if (node.Attributes != null)
            {
                foreach (XmlAttribute attribute in node.Attributes)
                {
                    PDFCreator.WriteLine($"{attribute.Name}: {attribute.Value}",
                        true, PDFCreator.normalFont, XBrushes.Black, indent + indentStep);
                }
            }

            foreach (XmlNode childNode in node.ChildNodes)
            {
                WriteAllNodes(childNode, indent + indentStep);
            }
        }

        private static void WriteAll()
        {
            if (xml.DocumentElement != null)
            {
                PDFCreator.NewPage();
                WriteAllNodes(xml.DocumentElement);
            }
        }

        private static string GetAttributeValue(string nodeName, string attributeName)
        {
            string value = "not found";

            XmlNode? node = xml.SelectSingleNode($"//{nodeName}");
            if (node != null)
            {
                value = GetAttributeValue(node, attributeName);
            }
            return value;
        }

        private static string GetAttributeValue(XmlNode node, string attributeName)
        {
            string value = "not found";

            XmlAttributeCollection? collection = node.Attributes;
            if (collection != null)
            {
                XmlAttribute? attribute = collection[attributeName];
                if (attribute != null)
                {
                    value = attribute.Value;
                }
            }
            return value;
        }
    }
}