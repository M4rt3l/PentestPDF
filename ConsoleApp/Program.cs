using System.Diagnostics;
using System.Text.RegularExpressions;

namespace ConsoleApp
{
    class Program
    {
        private static string workDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        private static string target = "127.0.0.1";
        private static string[] availableTools = { "nmap", "sqlmap", "mimikatz", "nikto", "wincmd" };
        private static List<string> selectedTools = new();
        private static bool canRun = true;

        [STAThread]
        static void Main(string[] args)
        {
            if (args.Length > 0)
            {
                canRun = HandleArgs(args);
            }

            if (selectedTools.Count == 0)
            {
                selectedTools = availableTools.ToList();
            }

            if (canRun)
            {
                CleanupOutputDirectory();

                foreach (string scriptName in selectedTools)
                {
                    string scriptPath = GetContentPath($"Scripts\\{scriptName}.ps1");

                    if (File.Exists(scriptPath))
                    {
                        Console.WriteLine($"{scriptName}.ps1 is Running...");
                        RunScript(scriptPath);
                    }
                }
                PDFCreator.Create(workDirectory, false);
                Console.WriteLine($"Document was created in {workDirectory}");
            }
        }

        private static bool HandleArgs(string[] args)
        {
            if (args[0] == "-h" || args[0] == "-help")
            {
                DisplayHelp();
                return false;
            }

            string currentKey = string.Empty;

            foreach (var arg in args)
            {
                if (arg.StartsWith("-"))
                {
                    currentKey = arg;
                }
                else
                {
                    if (currentKey == "-tools")
                    {
                        if (availableTools.Contains(arg))
                        {
                            selectedTools.Add(arg);
                        }
                        else
                        {
                            Console.WriteLine($"{arg} is not available.");
                            return false;
                        }
                    }
                    else if (currentKey == "-target")
                    {
                        string pattern = @"^(?:\d{1,3}\.){3}\d{1,3}$";
                        Regex regex = new Regex(pattern);

                        if (regex.IsMatch(arg))
                        {
                            target = arg;
                        }
                        else
                        {
                            Console.WriteLine("Wrong address.");
                            return false;
                        }
                    }
                    else if (currentKey == "-output")
                    {
                        if (Directory.Exists(arg))
                        {
                            workDirectory = arg;
                        }
                        else
                        {
                            Console.WriteLine($"This directory does not exist.");
                            return false;
                        }
                    }
                    else
                    {
                        Console.WriteLine("Wrong argument.");
                        return false;
                    }
                }
            }
            WriteRunParams();
            return true;
        }

        private static void WriteRunParams()
        {
            if (selectedTools.Count > 0)
            {
                Console.WriteLine("Selected tools: ");
                foreach (var tool in selectedTools)
                {
                    Console.WriteLine($" {tool}");
                }
            }
            Console.WriteLine($"Target: {target}");
            Console.WriteLine($"Output directory: {workDirectory}");
        }

        private static void DisplayHelp()
        {
            Console.WriteLine("\nOptions:");
            Console.WriteLine("  -h, -help           Display options");
            Console.WriteLine("  -tools T1 T2 ...    Select tools that will be used");
            Console.WriteLine("  -target X.X.X.X     Select target ip address");
            Console.WriteLine("  -output DIRECTORY   Select output directory");

            Console.WriteLine("\nAvailable tools:");
            foreach (string tool in availableTools)
            {
                Console.WriteLine($"  {tool}");
            }
        }

        private static void RunScript(string path)
        {
            Process process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    Arguments = $"-File \"{path}\" \"{workDirectory}\" \"{target}\"",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true
                }
            };

            process.Start();
            process.WaitForExit();

            string result = string.Empty;
            if (process.ExitCode == 0)
            {
                Console.WriteLine($"{Path.GetFileName(path)} successfully finished ");
            }
            else
            {
                Console.WriteLine($"Process failed with exit code: {process.ExitCode}.");
            }

            Console.WriteLine(process.StandardOutput.ReadToEnd());
            Console.WriteLine(process.StandardError.ReadToEnd());
        }

        private static void CleanupOutputDirectory()
        {
            string outputsDirectory = Path.Combine(workDirectory, "Outputs");
            if (Directory.Exists(outputsDirectory))
            {
                string[] files = Directory.GetFiles(outputsDirectory);

                foreach (string file in files)
                {
                    string extension = Path.GetExtension(file);
                    if (extension.Equals(".txt", StringComparison.OrdinalIgnoreCase) ||
                        extension.Equals(".xml", StringComparison.OrdinalIgnoreCase))
                    {
                        File.Delete(file);
                    }
                }
            }
        }

        public static string GetContentPath(string relativePath)
        {
            string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            return Path.Combine(baseDirectory, "Content", relativePath);
        }
    }
}