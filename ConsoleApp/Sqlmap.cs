using PdfSharp.Drawing;
using System.Text.RegularExpressions;

namespace ConsoleApp
{
    class Sqlmap
    {
        static string? version;

        public static void AddReport(string path)
        {
            if (path != null)
            {
                PDFCreator.champterName = "SQLmap";
                PDFCreator.champterColor = XBrushes.Green;
                PDFCreator.NewPage(true);

                List<Element> urls = ReadTxt(path);

                PDFCreator.WriteTitle("SQLmap: ");
                if (version != null)
                {
                    PDFCreator.WriteLine("Version: ", true, PDFCreator.boldFont);
                    PDFCreator.Write(version);
                }

                WriteRecords(urls);
            }
        }

        public static void WriteRecords(List<Element> records)
        {
            int counter = 0;
            PDFCreator.WriteTitle("Records: ");
            foreach (var url in records)
            {
                counter++;
                PDFCreator.WriteLine($"URL {counter}: ", true, PDFCreator.boldFont);
                PDFCreator.Write(url.Value);

                foreach (Element child in url.Children)
                {
                    XBrush color;
                    if (child.Name == "INFO") { color = XBrushes.DodgerBlue; }
                    else if (child.Name == "WARNING") { color = XBrushes.Goldenrod; }
                    else if (child.Name == "ERROR") { color = XBrushes.Red; }
                    else { color = XBrushes.Black; }

                    PDFCreator.WriteLine($"[{child.Name}] ", 
                        false, PDFCreator.normalFont, color, 15);
                    PDFCreator.Write(child.Value);
                }
                PDFCreator.NewLine(5);
            }
        }

        public static List<Element> ReadTxt(string sqlmapPath)
        {
            List<Element> urls = new();
            string[] lines = File.ReadAllLines(sqlmapPath);

            Element activeRecord = new();
            bool hasUrl = false;

            string pattern_version = @"\{([\d.]+)\#\w+\}";
            string pattern_url = @"GET http://(.*)";
            string pattern = @"\[[^\]]+\]\s\[([^\]]+)\]\s(.*)";
            string pattern_end = @"\[\d+\/\d+\]\s\w+\:";

            foreach (string line in lines)
            {
                Match match_version = Regex.Match(line, pattern_version);
                Match match_end = Regex.Match(line, pattern_end);
                Match match_url = Regex.Match(line, pattern_url);
                Match match = Regex.Match(line, pattern);

                if (match_end.Success)
                {
                    if (hasUrl)
                    {
                        urls.Add(activeRecord);
                    }
                }
                else if (match_url.Success)
                {
                    activeRecord = new Element("", match_url.Groups[1].Value);
                    hasUrl = true;
                }
                else if (match.Success)
                {
                    Element child = new Element(match.Groups[1].Value, match.Groups[2].Value);
                    activeRecord.AddChild(child);
                }
                else if (match_version.Success)
                {
                    version = match_version.Groups[1].Value;
                }
            }
            return urls;
        }
    }
}